==============================================================================
Table of Contents                                                          *toc*

Config ··················································· |auto-session.config|
Commands ··············································· |auto-session.commands|
API ························································· |auto-session.api|

==============================================================================
Config                                                     *auto-session.config*

AutoSession.Config                                          *AutoSession.Config*

    Fields: ~
        {enabled?}                            (boolean)                                        Enables/disables auto saving and restoring
        {root_dir?}                           (string)                                         root directory for session files, by default is `vim.fn.stdpath('data') .. '/sessions/'`
        {auto_save?}                          (boolean)                                        Enables/disables auto saving session on exit
        {auto_restore?}                       (boolean)                                        Enables/disables auto restoring session on start
        {auto_create?}                        (boolean|function)                               Enables/disables auto creating new session files. Can take a function that should return true/false if a new session file should be created or not
        {auto_delete_empty_sessions?}         (boolean)                                        Enables/disables deleting the session if there no named, non-empty buffers when auto-saving
        {suppressed_dirs?}                    (table)                                          Suppress auto session for directories
        {allowed_dirs?}                       (table)                                          Allow auto session for directories, if empty then all directories are allowed except for suppressed ones
        {auto_restore_last_session?}          (boolean)                                        On startup, loads the last saved session if session for cwd does not exist
        {git_use_branch_name?}                (boolean)                                        Include git branch name in session name to differentiate between sessions for different git branches
        {git_auto_restore_on_branch_change?}  (boolean)                                        Should we auto-restore the session when the git branch changes. Requires git_use_branch_name
        {lazy_support?}                       (boolean)                                        Automatically detect if Lazy.nvim is being used and wait until Lazy is done to make sure session is restored correctly. Does nothing if Lazy isn't being used. Can be disabled if a problem is suspected or for debugging
        {bypass_save_filetypes?}              (table)                                          List of file types to bypass auto save when the only buffer open is one of the file types listed, useful to ignore dashboards
        {close_unsupported_windows?}          (boolean)                                        Whether to close windows that aren't backed by a real file
        {args_allow_single_directory?}        (boolean)                                        Follow normal session save/load logic if launched with a single directory as the only argument
                                                                                               Argv Handling
        {args_allow_files_auto_save?}         (boolean|function)                               Allow saving a session even when launched with a file argument (or multiple files/dirs). It does not load any existing session first. While you can just set this to true, you probably want to set it to a function that decides when to save a session when launched with file args. See documentation for more detail
        {continue_restore_on_error?}          (boolean)                                        Keep loading the session even if there's an error. Set to false to get the line number of an error when loading a session
        {show_auto_restore_notif?}            (boolean)                                        Whether to show a notification when auto-restoring
        {log_level?}                          (string|integer)                                 "debug", "info", "warn", "error" or vim.log.levels.DEBUG, vim.log.levels.INFO, vim.log.levels.WARN, vim.log.levels.ERROR
        {cwd_change_handling?}                (boolean)                                        Follow cwd changes, saving a session before change and restoring after
        {lsp_stop_on_restore?}                (boolean|function)                               Should language servers be stopped when restoring a session. Can also be a function that will be called if set. Not called on autorestore from startup
        {restore_error_handler?}              (restore_error_fn)                               Called when there's an error restoring. By default, it ignores fold errors otherwise it displays the error and returns false to disable auto_save

        {purge_after_minutes?}                (number|nil)                                     -- Sessions older than purge_after_minutes will be deleted asynchronously on startup, e.g. set to 14400 to delete sessions that haven't been accessed for more than 10 days, defaults to off (no purging), requires >= nvim 0.10
        {session_lens?}                       (SessionLens)                                    Session lens configuration options

        {pre_save_cmds?}                      (table)                                          executes before a session is saved

                                                                                               Hooks
        {save_extra_cmds?}                    (table)                                          executes before a session is saved
        {post_save_cmds?}                     (table)                                          executes after a session is saved
        {pre_restore_cmds?}                   (string|fun(args:AutoSession.PreRestoreArgs)[])  executes before a session is restored
        {post_restore_cmds?}                  (table)                                          executes after a session is restored
        {pre_delete_cmds?}                    (table)                                          executes before a session is deleted
        {post_delete_cmds?}                   (table)                                          executes after a session is deleted
        {no_restore_cmds?}                    (table)                                          executes at VimEnter when no session is restored
        {pre_cwd_changed_cmds?}               (table)                                          executes before cwd is changed if cwd_change_handling is true
        {post_cwd_changed_cmds?}              (table)                                          executes after cwd is changed if cwd_change_handling is true


SessionLens                                                        *SessionLens*

    Session Lens Cenfig

    Fields: ~
        {load_on_setup?}    (boolean)
        {picker_opts?}      (table)                Telescope/Snacks picker options
        {session_control?}  (SessionControl)
        {mappings?}         (SessionLensMappings)


SessionControl                                                  *SessionControl*


    Fields: ~
        {control_dir?}       (string)
        {control_filename?}  (string)


SessionLensMappings                                        *SessionLensMappings*

    Session Lens Mapping

    Fields: ~
        {delete_session?}     (table)  mode and key for deleting a session from the picker
        {alternate_session?}  (table)  mode and key for swapping to alertnate session from the picker
        {copy_session?}       (table)  mode and key for copying a session from the picker


restore_error_fn                                              *restore_error_fn*


    Type: ~
        fun(error_msg:string):disable_auto_save


==============================================================================
Commands                                                 *auto-session.commands*

This plugin provides the following commands:

  `:SessionSave` - saves a session based on the `cwd` in `root_dir`
  `:SessionSave my_session` - saves a session called `my_session` in `root_dir`

  `:SessionRestore` - restores a session based on the `cwd` from `root_dir`
  `:SessionRestore my_session` - restores `my_session` from `root_dir`

  `:SessionDelete` - deletes a session based on the `cwd` from `root_dir`
  `:SessionDelete my_session` - deletes `my_session` from `root_dir`

  `:SessionDisableAutoSave` - disables autosave
  `:SessionDisableAutoSave!` - enables autosave (still does all checks in the config)
  `:SessionToggleAutoSave` - toggles autosave

  `:SessionPurgeOrphaned` - removes all orphaned sessions with no working directory left.

  `:SessionSearch` - open a session picker, uses Telescope or Snacks if installed, vim.ui.select otherwise

==============================================================================
API                                                           *auto-session.api*

AutoSession.setup({config})                                  *AutoSession.setup*
    Setup function for AutoSession

    Parameters: ~
        {config}  (AutoSession.Config|nil)  Config for auto session


AutoSession.session_exists_for_cwd()        *AutoSession.session_exists_for_cwd*
    Quickly checks if a session file exists for the current working directory.
    This is useful for starter plugins which don't want to display 'restore session'
    unless a session for the current working directory exists.

    Returns: ~
        (boolean)  if a session exists for the cwd


AutoSession.AutoSaveSession()                      *AutoSession.AutoSaveSession*
    AutoSaveSession
    Function called by auto_session to trigger auto_saving sessions, for example on VimExit events.

    Returns: ~
        (boolean)  if a session was saved


                                                *AutoSession.AutoRestoreSession*
AutoSession.AutoRestoreSession({session_name?}, {is_startup?})
    Function called by AutoSession when automatically restoring a session.

    Parameters: ~
        {session_name?}  (string)       An optional session to load
        {is_startup?}    (boolean|nil)  Is this autorestore happening on startup

    Returns: ~
        (boolean)  returns whether restoring the session was successful or not.


                                                       *AutoSession.SaveSession*
AutoSession.SaveSession({session_name?}, {show_message?})
    Saves a session to the dir specified in the config. If no optional
    session name is passed in, it uses the cwd as the session name

    Parameters: ~
        {session_name?}  (string|nil)  Optional session name
        {show_message?}  (boolean)     Optional, whether to show a message on save (true by default)

    Returns: ~
        (boolean)


                                                  *AutoSession.SaveSessionToDir*
AutoSession.SaveSessionToDir({session_dir}, {session_name?}, {show_message?})
    Saves a session to the passed in directory. If no optional
    session name is passed in, it uses the cwd as the session name

    Parameters: ~
        {session_dir}    (string)      Directory to write the session file to
        {session_name?}  (string|nil)  Optional session name
        {show_message?}  (boolean)     Optional, whether to show a message on save (true by default)

    Returns: ~
        (boolean)


RestoreOpts                                                        *RestoreOpts*

    Fields: ~
        {show_message}            (boolean|nil)  Should messages be shown
        {is_startup_autorestore}  (boolean|nil)  True if this is the the startup autorestore


                                                    *AutoSession.RestoreSession*
AutoSession.RestoreSession({session_name?}, {opts?})
    Restores a session from the passed in directory. If no optional session name
    is passed in, it uses the cwd as the session name

    Parameters: ~
        {session_name?}  (string|nil)       Optional session name
        {opts?}          (RestoreOpts|nil)  restore options


                                             *AutoSession.RestoreSessionFromDir*
AutoSession.RestoreSessionFromDir({session_dir}, {session_name?}, {opts?})
    Restores a session from the passed in directory. If no optional session name
    is passed in, it uses the cwd as the session name

    Parameters: ~
        {session_dir}    (string)           Directory to write the session file to
        {session_name?}  (string|nil)       Optional session name
        {opts?}          (RestoreOpts|nil)  restore options


AutoSession.PreRestoreArgs                          *AutoSession.PreRestoreArgs*

    Fields: ~
        {restored_session_name}  (string)


                                                *AutoSession.RestoreSessionFile*
AutoSession.RestoreSessionFile({session_path}, {opts?})
    Restores a session from a specific file

    Parameters: ~
        {session_path}  (string)           The session file to load
        {opts?}         (RestoreOpts|nil)  restore options

    Returns: ~
        (boolean)  a session restored


                                                     *AutoSession.DeleteSession*
AutoSession.DeleteSession({session_name?})
    Deletes a session from the config session dir. If no optional session name
    is passed in, it uses the cwd as the session name

    Parameters: ~
        {session_name?}  (string|nil)  Optional session name


                                              *AutoSession.DeleteSessionFromDir*
AutoSession.DeleteSessionFromDir({session_dir}, {session_name?})
    Deletes a session from the passed in directory. If no optional session
    name is passed in, it uses the cwd as the session name

    Parameters: ~
        {session_dir}    (string)      Directory to delete the session from
        {session_name?}  (string|nil)  Optional session name


                                                 *AutoSession.DeleteSessionFile*
AutoSession.DeleteSessionFile({session_path}, {session_name})
    Delete a session file

    Parameters: ~
        {session_path}  (string)  The filename to delete
        {session_name}  (string)  Session name being deleted, just use to display messages

    Returns: ~
        (boolean)   Was the session file deleted


AutoSession.DisableAutoSave({enable?})             *AutoSession.DisableAutoSave*
    Disables autosave. Enables autosave if enable is true

    Parameters: ~
        {enable?}  (boolean)  Optional parameter to enable autosaving

    Returns: ~
        (boolean)   Whether autosaving is enabled or not


vim:tw=78:ts=8:noet:ft=help:norl:
